extends layout

block content
  a(href='/') ← Back
  h1 Convert to EPUB
  .card
    form#create-form
      label Input Markdown IDs (comma separated)
        input(name='inputMarkdownIds', required)
      script(src='/assets/epub.js')
    async function listEpubs() {
      const res = await fetch('/api/convert-to-epub/epubs');
      const data = await res.json();
      document.getElementById('epubs').innerHTML = (data.items||[]).map(e => `<tr><td>${e.jobId}</td><td>${e.path}</td><td>${new Date(e.createdAt).toLocaleString()}</td></tr>`).join('');
    }
    document.getElementById('refresh-jobs').addEventListener('click', listJobs);
    document.getElementById('refresh-epubs').addEventListener('click', listEpubs);
    document.getElementById('create-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const fd = new FormData(e.target);
      const body = { inputMarkdownIds: String(fd.get('inputMarkdownIds')).split(',').map(s=>s.trim()) };
      document.getElementById('status').textContent = 'Creating…';
      try {
        const res = await fetch('/api/convert-to-epub/jobs', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) });
        if (!res.ok) throw new Error('Create failed');
        await res.json();
        document.getElementById('status').textContent = 'Created';
        await listJobs();
        await listEpubs();
      } catch (err) {
        document.getElementById('status').textContent = '';
        alert(err.message || 'Error creating epub job');
      }
    });
    applyDropdowns();
    listJobs();
    listEpubs();